# The parent line must be the first non-comment line in the file
# This line defines the product name and version
parent artdaq_core  v1_05_01
defaultqual	e9:s21

# These optional lines define the installed directories where
# headers, libraries, and executables will be found
# Use them only if your product does not conform to the defaults
# Format: directory_type directory_path directory_name
# The only recognized values of the first field are incdir, libdir, and bindir
# The only recognized values of the second field are product_dir and fq_dir
# The third field is not constrained
# The examples here reflect the defaults
incdir      product_dir include
libdir      fq_dir      lib
bindir      fq_dir      bin
fcldir      -
perllib  product_dir

#
product		version		optional
art             v2_00_03        s36
art             v2_01_02        s35
art             v1_17_08        s34
art             v2_00_02        s33
art		v1_18_05	s31
art		v1_17_07	s30
art		v1_17_06	s28
art		v1_17_05	s26
art		v1_17_04	s24
art		v1_17_03	s21
cetbuildtools	v5_04_01	-	only_for_build
end_product_list

# e7  - with gcc 4.9.2 and -std=c++1y
# e9  - with gcc 4.9.3 and -std=c++14
# e10 - with gcc 4.9.3a and -std=c++14
# -nq- means there is no qualifier
# a "-" means the dependent product is not required by the parent and will not be setup
qualifier		art		notes
e9:s36:debug             e9:debug        -std=c++14
e9:s36:prof              e9:prof         -std=c++14
nu:e9:s36:debug          nu:e9:debug     -std=c++14
nu:e9:s36:prof           nu:e9:prof      -std=c++14
e10:s36:debug            e10:debug       -std=c++14
e10:s36:prof             e10:prof        -std=c++14
nu:e10:s36:debug         nu:e10:debug    -std=c++14
nu:e10:s36:prof          nu:e10:prof     -std=c++14
e9:s35:debug             e9:debug        -std=c++14
e9:s35:prof              e9:prof         -std=c++14
nu:e9:s35:debug          nu:e9:debug     -std=c++14
nu:e9:s35:prof           nu:e9:prof      -std=c++14
e10:s35:debug            e10:debug       -std=c++14
e10:s35:prof             e10:prof        -std=c++14
nu:e10:s35:debug         nu:e10:debug    -std=c++14
nu:e10:s35:prof          nu:e10:prof     -std=c++14
e9:s34:debug             e9:debug        -std=c++14
e9:s34:prof              e9:prof         -std=c++14
nu:e9:s34:debug          nu:e9:debug     -std=c++14
nu:e9:s34:prof           nu:e9:prof      -std=c++14
e10:s34:debug            e10:debug       -std=c++14
e10:s34:prof             e10:prof        -std=c++14
nu:e10:s34:debug         nu:e10:debug    -std=c++14
nu:e10:s34:prof          nu:e10:prof     -std=c++14
e9:s33:debug             e9:debug        -std=c++14
e9:s33:prof              e9:prof         -std=c++14
nu:e9:s33:debug          nu:e9:debug     -std=c++14
nu:e9:s33:prof           nu:e9:prof      -std=c++14
e10:s33:debug            e10:debug       -std=c++14
e10:s33:prof             e10:prof        -std=c++14
nu:e10:s33:debug         nu:e10:debug    -std=c++14
nu:e10:s33:prof          nu:e10:prof     -std=c++14
e9:s31:debug             e9:debug        -std=c++14
e9:s31:prof              e9:prof         -std=c++14
nu:e9:s31:debug          nu:e9:debug     -std=c++14
nu:e9:s31:prof           nu:e9:prof      -std=c++14
e7:s31:debug             e7:debug        -std=c++14
e7:s31:prof              e7:prof         -std=c++14
nu:e7:s31:debug          nu:e7:debug     -std=c++14
nu:e7:s31:prof           nu:e7:prof      -std=c++14
e9:s30:debug             e9:debug        -std=c++14
e9:s30:prof              e9:prof         -std=c++14
nu:e9:s30:debug          nu:e9:debug     -std=c++14
nu:e9:s30:prof           nu:e9:prof      -std=c++14
e7:s30:debug             e7:debug        -std=c++14
e7:s30:prof              e7:prof         -std=c++14
nu:e7:s30:debug          nu:e7:debug     -std=c++14
nu:e7:s30:prof           nu:e7:prof      -std=c++14
e9:s28:debug             e9:debug        -std=c++14
e9:s28:prof              e9:prof         -std=c++14
nu:e9:s28:debug          nu:e9:debug     -std=c++14
nu:e9:s28:prof           nu:e9:prof      -std=c++14
e7:s28:debug             e7:debug        -std=c++14
e7:s28:prof              e7:prof         -std=c++14
nu:e7:s28:debug          nu:e7:debug     -std=c++14
nu:e7:s28:prof           nu:e7:prof      -std=c++14
e9:s26:debug             e9:debug        -std=c++14
e9:s26:prof              e9:prof         -std=c++14
nu:e9:s26:debug          nu:e9:debug     -std=c++14
nu:e9:s26:prof           nu:e9:prof      -std=c++14
e7:s26:debug             e7:debug        -std=c++14
e7:s26:prof              e7:prof         -std=c++14
nu:e7:s26:debug          nu:e7:debug     -std=c++14
nu:e7:s26:prof           nu:e7:prof      -std=c++14
e9:s24:debug             e9:debug        -std=c++14
e9:s24:prof              e9:prof         -std=c++14
nu:e9:s24:debug          nu:e9:debug     -std=c++14
nu:e9:s24:prof           nu:e9:prof      -std=c++14
e7:s24:debug             e7:debug        -std=c++14
e7:s24:prof              e7:prof         -std=c++14
nu:e7:s24:debug          nu:e7:debug     -std=c++14
nu:e7:s24:prof           nu:e7:prof      -std=c++14
e9:s21:debug             e9:debug        -std=c++14
e9:s21:prof              e9:prof         -std=c++14
nu:e9:s21:debug          nu:e9:debug     -std=c++14
nu:e9:s21:prof           nu:e9:prof      -std=c++14
e7:s21:debug             e7:debug        -std=c++14
e7:s21:prof              e7:prof         -std=c++14
nu:e7:s21:debug          nu:e7:debug     -std=c++14
nu:e7:s21:prof           nu:e7:prof      -std=c++14
end_qualifier_list



table_fragment_begin
# this is temporary until art and boost define ROOT_INCLUDE_PATH
pathPrepend(ROOT_INCLUDE_PATH, ${ART_INC}:${FHICLCPP_INC}:${CETLIB_INC}:${BOOST_INC}:${ARTDAQ_CORE_INC})
table_fragment_end
#

# Preserve tabs and formatting in emacs and vi / vim:

### Local Variables:
### tab-width: 8
### End:

# vi:set ts=8 noexpandtab:
